$:.push('../')
require 'freenet'
require 'yaml'

module Freenet
  class Site
    attr_reader :name
    STORE_PATH = File.expand_path("~/.rubyFreenetSites")
    def self.add_site(site)
      existing_sites = load_sites
      site = site.to_hash if site.respond_to? :to_hash
      existing_sites << site
      save_sites(existing_sites)
    end
    
    def self.save_sites(sites)
      sites = sites.collect do |s|
        if s.respond_to? :to_hash
          s.to_hash 
        else
          s
        end
      end
      File.open(STORE_PATH, 'w') do |f|
        f.flock(File::LOCK_EX)
        YAML.dump(sites, f)
        f.flock(File::LOCK_UN)
      end
    end
    
    def self.load_sites
      if File.exists? STORE_PATH
        sites = []
        File.open(STORE_PATH) do |f|
          f.flock(File::LOCK_EX)
          sites = YAML.load(f)
          f.flock(File::LOCK_UN)
        end
        sites ||= []
        sites.collect do |s|
          site = Site.new(s[:type], s[:dir], s[:name])
          site.keys = s[:keys] if s[:keys]
          site.version = s[:version]
          site.last_update = s[:last_update]
          site
        end
      else
        []
      end
    end
    
    attr_accessor :version, :client, :keys, :name, :last_update

    def initialize(type, path, name)
      raise SiteError.new("Invalid type: #{type}") unless ['USK','SSK','CHK','KSK'].include? type
      @path, @type, @name = path, type, name
      @version = ''
    end
    
    def connect
      @client = Freenet::FCP::Client.new()
    end
    
    def disconnect
      @client.disconnect
    end
    
    def generate_key
      @keys = @client.generate_keypair
    end
    
    def process_site
      
    end
    
    # Insert a whole site from disk
    def insert_site(path = nil)
      path ||= @path
      case @type
      when 'CHK', 'KSK' then raise SiteError.new('Invalid key type for site insert')
      end
      generate_key unless @keys
      @uri ||= Freenet::URI.new(@keys[0])
      @uri.type = @type
      @uri.path = "/#{@name}"
      @uri.version ||= @version
      @uri.version += 1
      @last_update = File.mtime(path)
      uri = @client.putdir(@uri, path)
      uri
    end
    
    # Insert a single file. You probably want a CHK for this, use it to insert
    # large files that won't change, eg media files.
    #
    # path must be the full filesystem path to the file.
    #
    # If the type is CHK then site isn't used as CHKs are generated by the node. You may 
    # append any text after the / in a CHK URI
    #
    # If the type is KSK then site is the key
    # If the type is SSK or USK then it must be sitename/filename
    def insert_file(path, type = nil, site=nil)
      uri = ''
      type ||= @type
      case type
      when 'CHK' then uri = 'CHK@'
      else
        raise SiteError.new('Invalid key') unless site
        uri = "#{@type}@#{site}"
      end
      @client.put(uri, nil, true, 'UploadFrom'=>'disk','Filename'=>path) do |status, message, response|
        case status
        when :uri_generated
          puts "URI created: #{response.items['URI']}"
        when :success
          puts "File inserted successfully"
        when :failed
          puts "File insertion failed!"
        end
      end
    end
    
    def to_hash
      {:type=>@type,
       :name=>@name,
       :version=>@version,
       :dir=>@path,
       :keys=>@keys,
       :last_update=>@last_update}
    end
  end
  
  class SiteError < StandardError
  end
end